#!/usr/bin/env python3.2

import argparse
import os
import os.path
import subprocess


class HandbrakeConverter:
  def __init__(self, hbpath, hbpreset, out):
    self.__hbpath = hbpath
    self.__hbpreset = hbpreset
    self.__out = out

  def __replace_ext(self, filename, ext='mp4'):
    base = os.path.splitext(filename)[0]
    return '{}.{}'.format(base, ext)

  def __cleanup(self, path):
    if os.path.exists(path):
      print('>>> Removing {}'.format(path))
      os.remove(path)

  def convert(self, input, overwrite=False):
    output = self.__replace_ext(os.path.basename(input))
    output = os.path.join(self.__out, output)

    if not overwrite and os.path.exists(output):
      print('>>> {} already exists, skipping.'.format(output))
      return

    args = (
      self.__hbpath,
      '--preset', self.__hbpreset,
      '--input', input,
      '--out', output,
    )

    try:
      subprocess.check_call(args)
    except subprocess.CalledProcessError as err:
      print('>>> Error during conversion: {}'.format(err.returncode))
      self.__cleanup(output)
    except KeyboardInterrupt:
      print('>>> Cancelled conversion')
      self.__cleanup(output)
      raise


def main():
  parser = argparse.ArgumentParser(description='Convert video files to .mp4')
  parser.add_argument('--preset', default='Regular',
                      help='HandBrakeCLI preset to use')
  parser.add_argument('--hbpath', default='HandBrakeCLI',
                      help='Path to HandBrakeCLI')
  parser.add_argument('--out', default='',
                      help='Destination for converted files')
  parser.add_argument('files', nargs='+', help='files to convert')

  args = parser.parse_args()

  converter = HandbrakeConverter(hbpath=args.hbpath, hbpreset=args.preset,
                                 out=args.out)
  for infile in args.files:
    print('>>> Converting {}'.format(infile))
    converter.convert(infile)


if __name__ == '__main__':
  main()
